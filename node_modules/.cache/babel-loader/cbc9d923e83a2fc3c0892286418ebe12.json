{"ast":null,"code":"export function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  }\n}\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n\n  if (blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {}\n  } else {}\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {\n      moves.concat(getValidMoves(board.black[i]));\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      moves.concat(getValidMoves(board.red[i]));\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidMoves(position) {\n  var moves = [];\n\n  if (blackContains(position) || this.redContains(position)) {\n    for (var i = -1; i < 2; i++) {\n      for (var j = -1; j < 2; j++) {\n        if (i !== 0 && j !== 0) {\n          var pos = {\n            row: position.row + i,\n            column: position.column + j,\n            jump: false\n          };\n\n          if (!this.blackContains(pos) && !this.redContains(pos)) {\n            moves.push(pos);\n          }\n\n          var jumpPos = this.getValidJump(position, i, j);\n          moves.push(jumpPos);\n        }\n      }\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j) {\n  var newPos = {\n    row: curPos.row + i,\n    column: curPos.column + j\n  };\n  var jumpPos = {\n    row: newPos.row + i,\n    column: newPos.column + j,\n    jump: true,\n    jumpedPiece: newPos\n  };\n\n  if (this.blackContains(curPos)) {\n    if (this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n\n  if (this.redContains(curPos)) {\n    if (this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n  if (black === true) {\n    for (var i = 0; i < board.black.length; i++) {\n      if (board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      if (board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n  if (black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n}\n\nfunction blackContains(position) {\n  for (var i = 0; i < this.state.board.black.length; i++) {\n    if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction redContains(position) {\n  for (var i = 0; i < this.state.board.red.length; i++) {\n    if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/MiniMax.js"],"names":["minimax","board","isMax","depth","alpha","beta","blackHeuristic","m","calculateHeuristic","val","nextBoards","getNextBoards","i","length","Math","max","min","h","black","red","moves","getAllValidMoves","concat","getValidMoves","position","blackContains","redContains","j","pos","row","column","jump","push","jumpPos","getValidJump","curPos","newPos","jumpedPiece","removePiece","splice","addPiece","state"],"mappings":"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","sourcesContent":["\n\nexport function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  }\n}\n\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n  if(blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n\n    }\n  }\n  else {\n\n  }\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n      moves.concat(getValidMoves(board.black[i]));\n    }\n  }\n  else {\n    for(var i = 0; i < board.red.length; i++) {\n      moves.concat(getValidMoves(board.red[i]));\n    }\n  }\n  return moves;\n}\n\nfunction getValidMoves(position) {\n  var moves = [];\n  if(blackContains(position) || this.redContains(position)) {\n    for(var i = -1; i < 2; i++) {\n      for(var j = -1; j < 2; j++) {\n        if(i !== 0 && j !== 0) {\n          var pos = {row: position.row + i, column: position.column + j, jump: false};\n          if(!this.blackContains(pos) && !this.redContains(pos)) {\n            moves.push(pos);\n          }\n          var jumpPos = this.getValidJump(position, i, j);\n          moves.push(jumpPos);\n        }\n      }\n    }\n  }\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j) {\n  var newPos = {row: curPos.row + i, column: curPos.column + j};\n  var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n  if(this.blackContains(curPos)) {\n    if(this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n  if(this.redContains(curPos)) {\n    if(this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n\n  if(black === true) {\n    for(var i = 0; i < board.black.length; i++) {\n      if(board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for(var i = 0; i < board.red.length; i++) {\n      if(board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n\n  if(black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n}\n\nfunction blackContains(position) {\n  for (var i = 0; i < this.state.board.black.length; i++) {\n    if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction redContains(position) {\n  for (var i = 0; i < this.state.board.red.length; i++) {\n    if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}