{"ast":null,"code":"export function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 3) {\n    board.m = calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      //get board from minimax, compare board.m to val\n      //find a way to return board from all control branches\n      var board = minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic);\n      val = Math.max(val, board.m);\n      alpha = Math.max(alpha, val);\n      board.m = val;\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      var board = minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic);\n      val = Math.min(val, board.m);\n      beta = Math.min(beta, val);\n      board.m = val;\n\n      if (alpha >= beta) {\n        return board;\n      }\n    }\n\n    return board;\n  }\n}\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n\n  if (blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n\n  if (h !== 0) {\n    console.log(h);\n  }\n\n  return h;\n}\nexport function getNextBoards(board, isMax, blackHeuristic) {\n  var moves = getAllValidMoves(board, isMax, blackHeuristic);\n  var firstBoards = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < moves.length; i++) {\n      firstBoards.push(executeMove(board, moves[i], true));\n    }\n  } else {\n    for (var i = 0; i < moves.length; i++) {\n      firstBoards.push(executeMove(board, moves[i], false));\n    }\n  }\n\n  var boards = [];\n\n  for (var i = 0; i < firstBoards.length; i++) {\n    if (firstBoards[i].length > 0) {\n      for (var j = 0; j < firstBoards[i].length; j++) {\n        boards.push(firstBoards[i][j]);\n      }\n    }\n  }\n\n  return boards;\n}\nexport function executeMove(board, move, blackTurn) {\n  var boards = [];\n\n  for (var i = 0; i < move.nextMoves.length; i++) {\n    var tempBoard = copyBoard(board);\n\n    if (move.nextMoves[i].jump) {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n      removePiece(tempBoard, move.nextMoves[i].jumpedPiece, blackTurn);\n    } else {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n    }\n\n    boards.push(tempBoard);\n  }\n\n  return boards;\n}\n\nfunction copyBoard(board) {\n  var tempBoard = {\n    black: [],\n    red: []\n  };\n\n  for (var i = 0; i < board.black.length; i++) {\n    tempBoard.black.push(board.black[i]);\n  }\n\n  for (i = 0; i < board.red.length; i++) {\n    tempBoard.red.push(board.red[i]);\n  }\n\n  return tempBoard;\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {\n      var posMoves = {\n        move: board.black[i]\n      };\n      posMoves.nextMoves = getValidMoves(board, board.black[i]);\n      moves.push(posMoves);\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      var posMoves = {\n        move: board.red[i]\n      };\n      posMoves.nextMoves = getValidMoves(board, board.red[i]);\n      moves.push(posMoves);\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidMoves(board, position) {\n  var moves = [];\n\n  if (blackContains(board, position) || redContains(board, position)) {\n    for (var i = -1; i < 2; i++) {\n      for (var j = -1; j < 2; j++) {\n        if (i !== 0 && j !== 0) {\n          if (position.row + i > -1 && position.row + i < 8 && position.column + j > -1 && position.column + j < 8) {\n            var pos = {\n              row: position.row + i,\n              column: position.column + j,\n              jump: false\n            };\n\n            if (!blackContains(board, pos) && !redContains(board, pos)) {\n              moves.push(pos);\n            }\n\n            var jumpPos = getValidJump(position, i, j, board);\n\n            if (jumpPos.length > 0) {\n              moves.push(jumpPos[0]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j, board) {\n  var newPos = {\n    row: curPos.row + i,\n    column: curPos.column + j\n  };\n  var jumpPos = {\n    row: newPos.row + i,\n    column: newPos.column + j,\n    jump: true,\n    jumpedPiece: newPos\n  };\n\n  if (jumpPos.row > -1 && jumpPos.row < 8 && jumpPos.column > -1 && jumpPos.column < 8) {\n    if (blackContains(board, curPos)) {\n      if (redContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n\n    if (redContains(board, curPos)) {\n      if (blackContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n  }\n\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n  if (black === true) {\n    for (var i = 0; i < board.black.length; i++) {\n      if (board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      if (board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n  if (black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n\n  return board;\n}\n\nfunction blackContains(board, position) {\n  for (var i = 0; i < board.black.length; i++) {\n    if (board.black[i].row === position.row && board.black[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction redContains(board, position) {\n  for (var i = 0; i < board.red.length; i++) {\n    if (board.red[i].row === position.row && board.red[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/MiniMax.js"],"names":["minimax","board","isMax","depth","alpha","beta","blackHeuristic","m","calculateHeuristic","val","nextBoards","getNextBoards","i","length","Math","max","min","h","black","red","console","log","moves","getAllValidMoves","firstBoards","push","executeMove","boards","j","move","blackTurn","nextMoves","tempBoard","copyBoard","jump","addPiece","removePiece","jumpedPiece","posMoves","getValidMoves","position","blackContains","redContains","row","column","pos","jumpPos","getValidJump","curPos","newPos","splice"],"mappings":"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","sourcesContent":["\n\nexport function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 3) {\n    board.m = calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      //get board from minimax, compare board.m to val\n      //find a way to return board from all control branches\n      var board = minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic);\n      val = Math.max(val, board.m);\n      alpha = Math.max(alpha, val);\n      board.m = val;\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      var board = minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic);\n      val = Math.min(val, board.m);\n      beta = Math.min(beta, val);\n      board.m = val;\n      if (alpha >= beta) {\n        return board;\n      }\n    }\n    return board;\n  }\n}\n\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n  if(blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n  if(h !== 0) {\n    console.log(h);\n  }\n  return h;\n}\n\nexport function getNextBoards(board, isMax, blackHeuristic) {\n\n  var moves = getAllValidMoves(board, isMax, blackHeuristic);\n  var firstBoards  = [];\n  if((isMax && blackHeuristic) || (!isMax && !blackHeuristic)) {\n    for(var i = 0; i < moves.length; i++) {\n      firstBoards.push(executeMove(board, moves[i], true))\n    }\n  } else {\n    for(var i = 0; i < moves.length; i++) {\n      firstBoards.push(executeMove(board, moves[i], false))\n    }\n  }\n  var boards = [];\n\n  for(var i = 0; i < firstBoards.length; i++) {\n    if(firstBoards[i].length > 0) {\n      for(var j = 0; j < firstBoards[i].length; j++) {\n        boards.push(firstBoards[i][j]);\n      }\n    }\n  }\n  return boards;\n}\n\nexport function executeMove(board, move, blackTurn) {\n  var boards = [];\n  for(var i = 0; i < move.nextMoves.length; i++) {\n    var tempBoard = copyBoard(board);\n    if(move.nextMoves[i].jump) {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n      removePiece(tempBoard, move.nextMoves[i].jumpedPiece, blackTurn);\n    } else {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n    }\n    boards.push(tempBoard);\n  }\n  return boards;\n}\n\nfunction copyBoard(board) {\n  var tempBoard = {black: [], red: []};\n  for(var i = 0; i < board.black.length; i++) {\n    tempBoard.black.push(board.black[i]);\n  }\n  for (i = 0; i < board.red.length; i++) {\n    tempBoard.red.push(board.red[i]);\n  }\n  return tempBoard;\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n      var posMoves = {move: board.black[i]};\n      posMoves.nextMoves = getValidMoves(board, board.black[i]);\n      moves.push(posMoves);\n    }\n  }\n  else {\n    for(var i = 0; i < board.red.length; i++) {\n      var posMoves = {move: board.red[i]};\n      posMoves.nextMoves = getValidMoves(board, board.red[i]);\n      moves.push(posMoves);\n    }\n  }\n  return moves;\n}\n\nfunction getValidMoves(board, position) {\n  var moves = [];\n  if(blackContains(board, position) || redContains(board, position)) {\n    for(var i = -1; i < 2; i++) {\n      for(var j = -1; j < 2; j++) {\n        if(i !== 0 && j !== 0) {\n          if(position.row + i > -1 && position.row + i < 8 && position.column + j > -1 && position.column + j < 8) {\n            var pos = {row: position.row + i, column: position.column + j, jump: false};\n            if(!blackContains(board, pos) && !redContains(board, pos)) {\n              moves.push(pos);\n            }\n            var jumpPos = getValidJump(position, i, j, board);\n            if (jumpPos.length > 0) {\n              moves.push(jumpPos[0]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j, board) {\n  var newPos = {row: curPos.row + i, column: curPos.column + j};\n  var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n  if(jumpPos.row > -1 && jumpPos.row < 8 && jumpPos.column > -1 && jumpPos.column < 8) {\n    if(blackContains(board, curPos)) {\n      if(redContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n    if(redContains(board, curPos)) {\n      if(blackContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n  }\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n\n  if(black === true) {\n    for(var i = 0; i < board.black.length; i++) {\n      if(board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for(var i = 0; i < board.red.length; i++) {\n      if(board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n\n  if(black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n  return board\n}\n\nfunction blackContains(board, position) {\n  for (var i = 0; i < board.black.length; i++) {\n    if (board.black[i].row === position.row && board.black[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction redContains(board, position) {\n  for (var i = 0; i < board.red.length; i++) {\n    if (board.red[i].row === position.row && board.red[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}