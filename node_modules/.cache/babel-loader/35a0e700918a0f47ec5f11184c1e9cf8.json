{"ast":null,"code":"export function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n\n      if (alpha >= beta) {\n        return value;\n      }\n    }\n\n    return value;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n\n      if (alpha >= beta) {\n        return value;\n      }\n    }\n\n    return value;\n  }\n}\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n\n  if (blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {}\n  } else {}\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {\n      moves.concat(getValidMoves(board.black[i]));\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      moves.concat(getValidMoves(board.red[i]));\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidMoves(position) {\n  var moves = [];\n\n  if (this.blackContains(position) || this.redContains(position)) {\n    for (var i = -1; i < 2; i++) {\n      for (var j = -1; j < 2; j++) {\n        if (i !== 0 && j !== 0) {\n          var pos = {\n            row: position.row + i,\n            column: position.column + j,\n            jump: false\n          };\n\n          if (!this.blackContains(pos) && !this.redContains(pos)) {\n            moves.push(pos);\n          }\n\n          var jumpPos = this.getValidJump(position, i, j);\n          moves.push(jumpPos);\n        }\n      }\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j) {\n  var newPos = {\n    row: curPos.row + i,\n    column: curPos.column + j\n  };\n  var jumpPos = {\n    row: newPos.row + i,\n    column: newPos.column + j,\n    jump: true,\n    jumpedPiece: newPos\n  };\n\n  if (this.blackContains(curPos)) {\n    if (this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n\n  if (this.redContains(curPos)) {\n    if (this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n  if (black === true) {\n    for (var i = 0; i < board.black.length; i++) {\n      if (board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      if (board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n  if (black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n}","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/MiniMax.js"],"names":["minimax","board","isMax","depth","alpha","beta","blackHeuristic","m","calculateHeuristic","val","nextBoards","getNextBoards","i","length","Math","max","value","min","h","black","red","moves","getAllValidMoves","concat","getValidMoves","position","blackContains","redContains","j","pos","row","column","jump","push","jumpPos","getValidJump","curPos","newPos","jumpedPiece","removePiece","splice","addPiece"],"mappings":"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","sourcesContent":["\n\nexport function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n      if (alpha >= beta) {\n        return value;\n      }\n    }\n    return value;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n      if (alpha >= beta) {\n        return value;\n      }\n    }\n    return value;\n  }\n}\n\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n  if(blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n\n    }\n  }\n  else {\n\n  }\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n      moves.concat(getValidMoves(board.black[i]));\n    }\n  }\n  else {\n    for(var i = 0; i < board.red.length; i++) {\n      moves.concat(getValidMoves(board.red[i]));\n    }\n  }\n  return moves;\n}\n\nfunction getValidMoves(position) {\n  var moves = [];\n  if(this.blackContains(position) || this.redContains(position)) {\n    for(var i = -1; i < 2; i++) {\n      for(var j = -1; j < 2; j++) {\n        if(i !== 0 && j !== 0) {\n          var pos = {row: position.row + i, column: position.column + j, jump: false};\n          if(!this.blackContains(pos) && !this.redContains(pos)) {\n            moves.push(pos);\n          }\n          var jumpPos = this.getValidJump(position, i, j);\n          moves.push(jumpPos);\n        }\n      }\n    }\n  }\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j) {\n  var newPos = {row: curPos.row + i, column: curPos.column + j};\n  var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n  if(this.blackContains(curPos)) {\n    if(this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n  if(this.redContains(curPos)) {\n    if(this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n      return jumpPos;\n    }\n  }\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n\n  if(black === true) {\n    for(var i = 0; i < board.black.length; i++) {\n      if(board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for(var i = 0; i < board.red.length; i++) {\n      if(board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n\n  if(black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}