{"ast":null,"code":"import _objectSpread from \"/Users/noahceluch/Documents/checkers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/noahceluch/Documents/checkers/src/Board.js\";\nimport React, { Component } from 'react';\nimport Row from './Row';\nimport { redContains, minimax, copyBoard } from './MiniMax';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSquareClick = position => {\n      this.aiMove();\n      console.log(this.state.board);\n      /*if(this.state.waitingForMove === true) {\n        if(this.isValidMove(position)) {\n           if (this.isJump(position) === true) {\n            var removingPiece = this.getJumpedPiece(position);\n            this.removePiece(removingPiece, !this.state.blackTurn);\n            this.removePiece(this.state.movingPiece, this.state.blackTurn);\n            this.addPiece(position, this.state.blackTurn);\n            if (this.checkWin(this.state.blackTurn)) {\n              this.props.handleChange(this.state.blackTurn, true);\n              return;\n            }\n          } else {\n            this.removePiece(this.state.movingPiece, this.state.blackTurn);\n            this.addPiece(position, this.state.blackTurn);\n          }\n           this.setState({ movingPiece: { row: -1, column: -1 } });\n          this.setState({ validSpaces: [] });\n          this.setState({ waitingForMove: false });\n          this.setState({ blackTurn: !this.state.blackTurn }, () => { this.props.handleChange(this.state.blackTurn, false); this.aiMove(); });\n         } else {\n          if((this.state.blackTurn && this.blackContains(position)) || (!this.state.blackTurn && this.redContains(position))) {\n            var moves = this.getValidMoves(position);\n            if(moves.length > 0) {\n              this.setState({ validSpaces: moves });\n              this.setState({ movingPiece: position});\n            }\n          }\n        }\n      } else {\n        if((this.state.blackTurn && this.blackContains(position)) || (!this.state.blackTurn && this.redContains(position))) {\n          if((this.state.blackTurn && this.state.blackHuman) || (!this.state.blackTurn && this.state.redHuman)) {\n            var moves = this.getValidMoves(position);\n            if(moves.length > 0) {\n              this.setState({ validSpaces: moves });\n              this.setState({ movingPiece: position});\n              this.setState({ waitingForMove: true });\n            }\n          }\n        }\n      }*/\n    };\n\n    this.state = {\n      board: {\n        black: [{\n          row: 0,\n          column: 1\n        }, {\n          row: 0,\n          column: 3\n        }, {\n          row: 0,\n          column: 5\n        }, {\n          row: 0,\n          column: 7\n        }, {\n          row: 1,\n          column: 0\n        }, {\n          row: 1,\n          column: 2\n        }, {\n          row: 1,\n          column: 4\n        }, {\n          row: 1,\n          column: 6\n        }, {\n          row: 2,\n          column: 1\n        }, {\n          row: 2,\n          column: 3\n        }, {\n          row: 2,\n          column: 5\n        }, {\n          row: 2,\n          column: 7\n        }],\n        red: [{\n          row: 5,\n          column: 0\n        }, {\n          row: 5,\n          column: 2\n        }, {\n          row: 5,\n          column: 4\n        }, {\n          row: 5,\n          column: 6\n        }, {\n          row: 6,\n          column: 1\n        }, {\n          row: 6,\n          column: 3\n        }, {\n          row: 6,\n          column: 5\n        }, {\n          row: 6,\n          column: 7\n        }, {\n          row: 7,\n          column: 0\n        }, {\n          row: 7,\n          column: 2\n        }, {\n          row: 7,\n          column: 4\n        }, {\n          row: 7,\n          column: 6\n        }]\n      },\n      validSpaces: [],\n      movingPiece: {\n        row: -1,\n        column: -1\n      },\n      blackTurn: true,\n      waitingForMove: false,\n      validPositionClicked: false,\n      blackHuman: true,\n      redHuman: true\n    };\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n  }\n\n  aiMove() {\n    if (this.state.blackTurn && !this.state.blackHuman || !this.state.blackTurn && !this.state.redHuman) {\n      console.log(\"in ai move\");\n      var newBoard = minimax(copyBoard(this.state.board), true, 0, -10000, 10000, this.state.blackTurn); //this.setState({board: {black: [], red: []}}, () => {\n\n      /*if(this.state.blackTurn) {\n        console.log(this.state.board);\n      } else {\n        for(var i = 0; i < newBoard.red.length; i++) {\n          console.log(\"adding\");\n          this.addPiece(newBoard.red[i]);\n        }\n      }\n      console.log(this.state.board);\n      this.setState({ blackTurn: !this.state.blackTurn }, () => { this.props.handleChange(this.state.blackTurn, false); });\n      });*/\n\n      this.setState(prevState => ({\n        board: _objectSpread({}, prevState.board, {\n          black: []\n        })\n      }));\n    }\n  }\n\n  isValidMove(position) {\n    for (var i = 0; i < this.state.validSpaces.length; i++) {\n      if (this.state.validSpaces[i].column === position.column && this.state.validSpaces[i].row === position.row) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isJump(position) {\n    for (var i = 0; i < this.state.validSpaces.length; i++) {\n      if (this.state.validSpaces[i].column === position.column && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getJumpedPiece(position) {\n    for (var i = 0; i < this.state.validSpaces.length; i++) {\n      if (this.state.validSpaces[i].column === position.column && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n        return this.state.validSpaces[i].jumpedPiece;\n      }\n    }\n\n    return {\n      row: -1,\n      column: -1\n    };\n  }\n\n  blackContains(position) {\n    for (var i = 0; i < this.state.board.black.length; i++) {\n      if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  redContains(position) {\n    for (var i = 0; i < this.state.board.red.length; i++) {\n      if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getValidMoves(position) {\n    var moves = [];\n\n    if (this.blackContains(position) || this.redContains(position)) {\n      for (var i = -1; i < 2; i++) {\n        for (var j = -1; j < 2; j++) {\n          if (i !== 0 && j !== 0) {\n            var pos = {\n              row: position.row + i,\n              column: position.column + j,\n              jump: false\n            };\n\n            if (!this.blackContains(pos) && !this.redContains(pos)) {\n              moves.push(pos);\n            }\n\n            var jumpPos = this.getValidJump(position, i, j);\n            moves.push(jumpPos);\n          }\n        }\n      }\n    }\n\n    return moves;\n  }\n\n  removePiece(position, black) {\n    if (black === true) {\n      for (var i = 0; i < this.state.board.black.length; i++) {\n        if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n          this.state.board.black.splice(i, 1);\n        }\n      }\n    } else {\n      for (var i = 0; i < this.state.board.red.length; i++) {\n        if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n          this.state.board.red.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  addPiece(position, black) {\n    if (black === true) {\n      this.state.board.black.push(position);\n    } else {\n      this.state.board.red.push(position);\n    }\n  }\n\n  getValidJump(curPos, i, j) {\n    var newPos = {\n      row: curPos.row + i,\n      column: curPos.column + j\n    };\n    var jumpPos = {\n      row: newPos.row + i,\n      column: newPos.column + j,\n      jump: true,\n      jumpedPiece: newPos\n    };\n\n    if (this.blackContains(curPos)) {\n      if (this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n\n    if (this.redContains(curPos)) {\n      if (this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n\n    return [];\n  }\n\n  checkWin(blackTurn) {\n    if (blackTurn === true) {\n      return this.state.board.red.length === 0;\n    } else {\n      return this.state.board.black.length === 0;\n    }\n  }\n\n  render() {\n    var rows = [];\n\n    for (var i = 0; i < 8; i++) {\n      rows.push(React.createElement(Row, {\n        row: i,\n        key: i,\n        board: this.state.board,\n        handleSquareClick: this.handleSquareClick,\n        validSpaces: this.state.validSpaces,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        width: 480,\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, rows);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/Board.js"],"names":["React","Component","Row","redContains","minimax","copyBoard","Board","constructor","props","handleSquareClick","position","aiMove","console","log","state","board","black","row","column","red","validSpaces","movingPiece","blackTurn","waitingForMove","validPositionClicked","blackHuman","redHuman","bind","newBoard","setState","prevState","isValidMove","i","length","isJump","jump","getJumpedPiece","jumpedPiece","blackContains","getValidMoves","moves","j","pos","push","jumpPos","getValidJump","removePiece","splice","addPiece","curPos","newPos","checkWin","render","rows","border","width","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Row from './Row';\nimport { redContains, minimax, copyBoard } from './MiniMax';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: {\n        black: [\n                {row: 0, column: 1}, {row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 7},\n                {row: 1, column: 0}, {row: 1, column: 2}, {row: 1, column: 4}, {row: 1, column: 6},\n                {row: 2, column: 1}, {row: 2, column: 3}, {row: 2, column: 5}, {row: 2, column: 7}\n        ],\n        red: [\n                {row: 5, column: 0}, {row: 5, column: 2}, {row: 5, column: 4}, {row: 5, column: 6},\n                {row: 6, column: 1}, {row: 6, column: 3}, {row: 6, column: 5}, {row: 6, column: 7},\n                {row: 7, column: 0}, {row: 7, column: 2}, {row: 7, column: 4}, {row: 7, column: 6}\n        ]\n      },\n      validSpaces: [],\n      movingPiece: {row: -1, column: -1},\n      blackTurn: true,\n      waitingForMove: false,\n      validPositionClicked: false,\n      blackHuman: true,\n      redHuman: true\n    }\n\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n  }\n\n  handleSquareClick = (position) => {\n    this.aiMove();\n    console.log(this.state.board);\n    /*if(this.state.waitingForMove === true) {\n      if(this.isValidMove(position)) {\n\n        if (this.isJump(position) === true) {\n          var removingPiece = this.getJumpedPiece(position);\n          this.removePiece(removingPiece, !this.state.blackTurn);\n          this.removePiece(this.state.movingPiece, this.state.blackTurn);\n          this.addPiece(position, this.state.blackTurn);\n          if (this.checkWin(this.state.blackTurn)) {\n            this.props.handleChange(this.state.blackTurn, true);\n            return;\n          }\n        } else {\n          this.removePiece(this.state.movingPiece, this.state.blackTurn);\n          this.addPiece(position, this.state.blackTurn);\n        }\n\n        this.setState({ movingPiece: { row: -1, column: -1 } });\n        this.setState({ validSpaces: [] });\n        this.setState({ waitingForMove: false });\n        this.setState({ blackTurn: !this.state.blackTurn }, () => { this.props.handleChange(this.state.blackTurn, false); this.aiMove(); });\n\n      } else {\n        if((this.state.blackTurn && this.blackContains(position)) || (!this.state.blackTurn && this.redContains(position))) {\n          var moves = this.getValidMoves(position);\n          if(moves.length > 0) {\n            this.setState({ validSpaces: moves });\n            this.setState({ movingPiece: position});\n          }\n        }\n      }\n    } else {\n      if((this.state.blackTurn && this.blackContains(position)) || (!this.state.blackTurn && this.redContains(position))) {\n        if((this.state.blackTurn && this.state.blackHuman) || (!this.state.blackTurn && this.state.redHuman)) {\n          var moves = this.getValidMoves(position);\n          if(moves.length > 0) {\n            this.setState({ validSpaces: moves });\n            this.setState({ movingPiece: position});\n            this.setState({ waitingForMove: true });\n          }\n        }\n      }\n    }*/\n  }\n\n  aiMove() {\n    if((this.state.blackTurn && !this.state.blackHuman) || (!this.state.blackTurn && !this.state.redHuman)) {\n      console.log(\"in ai move\");\n      var newBoard = minimax(copyBoard(this.state.board), true, 0, -10000, 10000, this.state.blackTurn );\n      //this.setState({board: {black: [], red: []}}, () => {\n        /*if(this.state.blackTurn) {\n          console.log(this.state.board);\n        } else {\n          for(var i = 0; i < newBoard.red.length; i++) {\n            console.log(\"adding\");\n            this.addPiece(newBoard.red[i]);\n          }\n        }\n        console.log(this.state.board);\n        this.setState({ blackTurn: !this.state.blackTurn }, () => { this.props.handleChange(this.state.blackTurn, false); });\n      });*/\n      this.setState(prevState => ({\n        board: {\n          ...prevState.board,\n          black: []\n        }\n      }));\n    }\n  }\n\n\n  isValidMove(position) {\n    for(var i = 0; i < this.state.validSpaces.length; i++) {\n      if(this.state.validSpaces[i].column === position.column\n        && this.state.validSpaces[i].row === position.row) {\n          return true;\n        }\n    }\n    return false;\n  }\n\n  isJump(position) {\n    for(var i = 0; i < this.state.validSpaces.length; i++) {\n      if(this.state.validSpaces[i].column === position.column\n        && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n          return true;\n        }\n    }\n    return false;\n  }\n\n  getJumpedPiece(position) {\n    for(var i = 0; i < this.state.validSpaces.length; i++) {\n      if(this.state.validSpaces[i].column === position.column\n        && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n          return this.state.validSpaces[i].jumpedPiece;\n        }\n    }\n    return {row: -1, column: -1};\n  }\n\n  blackContains(position) {\n    for (var i = 0; i < this.state.board.black.length; i++) {\n      if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  redContains(position) {\n    for (var i = 0; i < this.state.board.red.length; i++) {\n      if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getValidMoves(position) {\n    var moves = [];\n    if(this.blackContains(position) || this.redContains(position)) {\n      for(var i = -1; i < 2; i++) {\n        for(var j = -1; j < 2; j++) {\n          if(i !== 0 && j !== 0) {\n            var pos = {row: position.row + i, column: position.column + j, jump: false};\n            if(!this.blackContains(pos) && !this.redContains(pos)) {\n              moves.push(pos);\n            }\n            var jumpPos = this.getValidJump(position, i, j);\n            moves.push(jumpPos);\n          }\n        }\n      }\n    }\n    return moves;\n  }\n\n  removePiece(position, black) {\n\n    if(black === true) {\n      for(var i = 0; i < this.state.board.black.length; i++) {\n        if(this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n          this.state.board.black.splice(i, 1);\n        }\n      }\n    } else {\n      for(var i = 0; i < this.state.board.red.length; i++) {\n        if(this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n          this.state.board.red.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  addPiece(position, black) {\n\n    if(black === true) {\n      this.state.board.black.push(position);\n    } else {\n      this.state.board.red.push(position);\n    }\n  }\n\n  getValidJump(curPos, i, j) {\n    var newPos = {row: curPos.row + i, column: curPos.column + j};\n    var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n    if(this.blackContains(curPos)) {\n      if(this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n    if(this.redContains(curPos)) {\n      if(this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n    return [];\n  }\n\n  checkWin(blackTurn) {\n    if (blackTurn === true) {\n      return this.state.board.red.length === 0;\n    } else {\n      return this.state.board.black.length === 0;\n    }\n  }\n\n  render() {\n    var rows = [];\n    for(var i = 0; i < 8; i++) {\n      rows.push(<Row row={i} key={i}\n        board={this.state.board}\n        handleSquareClick={this.handleSquareClick}\n        validSpaces={this.state.validSpaces} />);\n    }\n    return <div style={{border: \"1px solid black\", width: 480, margin:\"auto\"}}>{rows}</div>;\n  }\n\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}