{"ast":null,"code":"export function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  }\n}\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n\n  if (blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {} else {}\n}\n\nexport function executeMove(board, move, blackTurn) {\n  var boards = [];\n  console.log(board);\n\n  for (var i = 0; i < move.nextMoves.length; i++) {\n    var tempBoard = copyBoard(board);\n\n    if (move.nextMoves[i].jump) {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n      removePiece(tempBoard, move.nextMoves[i].jumpedPiece, blackTurn);\n    } else {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n    }\n\n    boards.push(tempBoard);\n  }\n\n  return boards;\n}\n\nfunction copyBoard(board) {\n  var tempBoard = {\n    black: [],\n    red: []\n  };\n\n  for (var i = 0; i < board.black.length; i++) {\n    tempBoard.black.push(board.black[i]);\n  }\n\n  for (i = 0; i < board.red.length; i++) {\n    tempBoard.red.push(board.red[i]);\n  }\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {\n      var posMoves = {\n        move: board.black[i]\n      };\n      posMoves.nextMoves = getValidMoves(board, board.black[i]);\n      moves.push(posMoves);\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      var posMoves = {\n        move: board.red[i]\n      };\n      posMoves.nextMoves = getValidMoves(board, board.red[i]);\n      moves.push(posMoves);\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidMoves(board, position) {\n  var moves = [];\n\n  if (blackContains(board, position) || redContains(board, position)) {\n    for (var i = -1; i < 2; i++) {\n      for (var j = -1; j < 2; j++) {\n        if (i !== 0 && j !== 0) {\n          if (position.row + i > -1 && position.row + i < 8 && position.column + j > -1 && position.column + j < 8) {\n            var pos = {\n              row: position.row + i,\n              column: position.column + j,\n              jump: false\n            };\n\n            if (!blackContains(board, pos) && !redContains(board, pos)) {\n              moves.push(pos);\n            }\n\n            var jumpPos = getValidJump(position, i, j, board);\n\n            if (jumpPos.length > 0) {\n              moves.push(jumpPos[0]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j, board) {\n  var newPos = {\n    row: curPos.row + i,\n    column: curPos.column + j\n  };\n  var jumpPos = {\n    row: newPos.row + i,\n    column: newPos.column + j,\n    jump: true,\n    jumpedPiece: newPos\n  };\n\n  if (jumpPos.row > -1 && jumpPos.row < 8 && jumpPos.column > -1 && jumpPos.column < 8) {\n    if (blackContains(board, curPos)) {\n      if (redContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n\n    if (redContains(board, curPos)) {\n      if (blackContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n  }\n\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n  if (black === true) {\n    for (var i = 0; i < board.black.length; i++) {\n      if (board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      if (board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n  if (black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n\n  return board;\n}\n\nfunction blackContains(board, position) {\n  for (var i = 0; i < board.black.length; i++) {\n    if (board.black[i].row === position.row && board.black[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction redContains(board, position) {\n  for (var i = 0; i < board.red.length; i++) {\n    if (board.red[i].row === position.row && board.red[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/MiniMax.js"],"names":["minimax","board","isMax","depth","alpha","beta","blackHeuristic","m","calculateHeuristic","val","nextBoards","getNextBoards","i","length","Math","max","min","h","black","red","executeMove","move","blackTurn","boards","console","log","nextMoves","tempBoard","copyBoard","jump","addPiece","removePiece","jumpedPiece","push","getAllValidMoves","moves","posMoves","getValidMoves","position","blackContains","redContains","j","row","column","pos","jumpPos","getValidJump","curPos","newPos","splice"],"mappings":"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","sourcesContent":["\n\nexport function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  }\n}\n\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n  if(blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n\n  }\n  else {\n\n  }\n}\n\nexport function executeMove(board, move, blackTurn) {\n  var boards = [];\n  console.log(board);\n  for(var i = 0; i < move.nextMoves.length; i++) {\n    var tempBoard = copyBoard(board);\n    if(move.nextMoves[i].jump) {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n      removePiece(tempBoard, move.nextMoves[i].jumpedPiece, blackTurn);\n    } else {\n      addPiece(tempBoard, move.nextMoves[i], blackTurn);\n      removePiece(tempBoard, move.move, blackTurn);\n    }\n    boards.push(tempBoard);\n  }\n  return boards;\n}\n\nfunction copyBoard(board) {\n  var tempBoard = {black: [], red: []};\n  for(var i = 0; i < board.black.length; i++) {\n    tempBoard.black.push(board.black[i]);\n  }\n  for (i = 0; i < board.red.length; i++) {\n    tempBoard.red.push(board.red[i]);\n  }\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n      var posMoves = {move: board.black[i]};\n      posMoves.nextMoves = getValidMoves(board, board.black[i]);\n      moves.push(posMoves);\n    }\n  }\n  else {\n    for(var i = 0; i < board.red.length; i++) {\n      var posMoves = {move: board.red[i]};\n      posMoves.nextMoves = getValidMoves(board, board.red[i]);\n      moves.push(posMoves);\n    }\n  }\n  return moves;\n}\n\nfunction getValidMoves(board, position) {\n  var moves = [];\n  if(blackContains(board, position) || redContains(board, position)) {\n    for(var i = -1; i < 2; i++) {\n      for(var j = -1; j < 2; j++) {\n        if(i !== 0 && j !== 0) {\n          if(position.row + i > -1 && position.row + i < 8 && position.column + j > -1 && position.column + j < 8) {\n            var pos = {row: position.row + i, column: position.column + j, jump: false};\n            if(!blackContains(board, pos) && !redContains(board, pos)) {\n              moves.push(pos);\n            }\n            var jumpPos = getValidJump(position, i, j, board);\n            if (jumpPos.length > 0) {\n              moves.push(jumpPos[0]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j, board) {\n  var newPos = {row: curPos.row + i, column: curPos.column + j};\n  var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n  if(jumpPos.row > -1 && jumpPos.row < 8 && jumpPos.column > -1 && jumpPos.column < 8) {\n    if(blackContains(board, curPos)) {\n      if(redContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n    if(redContains(board, curPos)) {\n      if(blackContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n  }\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n\n  if(black === true) {\n    for(var i = 0; i < board.black.length; i++) {\n      if(board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for(var i = 0; i < board.red.length; i++) {\n      if(board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n\n  if(black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n  return board\n}\n\nfunction blackContains(board, position) {\n  for (var i = 0; i < board.black.length; i++) {\n    if (board.black[i].row === position.row && board.black[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction redContains(board, position) {\n  for (var i = 0; i < board.red.length; i++) {\n    if (board.red[i].row === position.row && board.red[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}