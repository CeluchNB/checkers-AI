{"ast":null,"code":"import _objectSpread from \"/Users/noahceluch/Documents/checkers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/noahceluch/Documents/checkers/src/Board.js\";\nimport React, { Component } from 'react';\nimport Row from './Row';\nimport { redContains, minimax, copyBoard } from './MiniMax';\nconst initialState = {\n  board: {\n    black: [{\n      row: 0,\n      column: 1\n    }, {\n      row: 0,\n      column: 3\n    }, {\n      row: 0,\n      column: 5\n    }, {\n      row: 0,\n      column: 7\n    }, {\n      row: 1,\n      column: 0\n    }, {\n      row: 1,\n      column: 2\n    }, {\n      row: 1,\n      column: 4\n    }, {\n      row: 1,\n      column: 6\n    }, {\n      row: 2,\n      column: 1\n    }, {\n      row: 2,\n      column: 3\n    }, {\n      row: 2,\n      column: 5\n    }, {\n      row: 2,\n      column: 7\n    }],\n    red: [{\n      row: 5,\n      column: 0\n    }, {\n      row: 5,\n      column: 2\n    }, {\n      row: 5,\n      column: 4\n    }, {\n      row: 5,\n      column: 6\n    }, {\n      row: 6,\n      column: 1\n    }, {\n      row: 6,\n      column: 3\n    }, {\n      row: 6,\n      column: 5\n    }, {\n      row: 6,\n      column: 7\n    }, {\n      row: 7,\n      column: 0\n    }, {\n      row: 7,\n      column: 2\n    }, {\n      row: 7,\n      column: 4\n    }, {\n      row: 7,\n      column: 6\n    }]\n  },\n  validSpaces: [],\n  movingPiece: {\n    row: -1,\n    column: -1\n  },\n  blackTurn: true,\n  waitingForMove: false,\n  validPositionClicked: false,\n  blackHuman: true,\n  redHuman: false,\n  gameActive: false\n};\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSquareClick = position => {\n      if (this.state.waitingForMove === true) {\n        if (this.isValidMove(position)) {\n          if (this.isJump(position) === true) {\n            var removingPiece = this.getJumpedPiece(position);\n            this.removePiece(removingPiece, !this.state.blackTurn);\n            this.removePiece(this.state.movingPiece, this.state.blackTurn);\n            this.addPiece(position, this.state.blackTurn);\n\n            if (this.checkWin(this.state.blackTurn)) {\n              this.props.handleChange(this.state.blackTurn, true);\n              return;\n            }\n          } else {\n            this.removePiece(this.state.movingPiece, this.state.blackTurn);\n            this.addPiece(position, this.state.blackTurn);\n          }\n\n          this.setState({\n            movingPiece: {\n              row: -1,\n              column: -1\n            }\n          });\n          this.setState({\n            validSpaces: []\n          });\n          this.setState({\n            waitingForMove: false\n          });\n          this.setState({\n            blackTurn: !this.state.blackTurn\n          }, () => {\n            this.props.handleChange(this.state.blackTurn, false);\n            this.aiMove();\n          });\n        } else {\n          if (this.state.blackTurn && this.blackContains(position) || !this.state.blackTurn && this.redContains(position)) {\n            var moves = this.getValidMoves(position);\n\n            if (moves.length > 0) {\n              this.setState({\n                validSpaces: moves\n              });\n              this.setState({\n                movingPiece: position\n              });\n            }\n          }\n        }\n      } else {\n        this.setState({\n          gameActive: true\n        });\n\n        if (this.state.blackTurn && this.blackContains(position) || !this.state.blackTurn && this.redContains(position)) {\n          if (this.state.blackTurn && this.state.blackHuman || !this.state.blackTurn && this.state.redHuman) {\n            var moves = this.getValidMoves(position);\n\n            if (moves.length > 0) {\n              this.setState({\n                validSpaces: moves\n              });\n              this.setState({\n                movingPiece: position\n              });\n              this.setState({\n                waitingForMove: true\n              });\n            }\n          }\n        }\n      }\n    };\n\n    this.state = {\n      board: {\n        black: [{\n          row: 0,\n          column: 1\n        }, {\n          row: 0,\n          column: 3\n        }, {\n          row: 0,\n          column: 5\n        }, {\n          row: 0,\n          column: 7\n        }, {\n          row: 1,\n          column: 0\n        }, {\n          row: 1,\n          column: 2\n        }, {\n          row: 1,\n          column: 4\n        }, {\n          row: 1,\n          column: 6\n        }, {\n          row: 2,\n          column: 1\n        }, {\n          row: 2,\n          column: 3\n        }, {\n          row: 2,\n          column: 5\n        }, {\n          row: 2,\n          column: 7\n        }],\n        red: [{\n          row: 5,\n          column: 0\n        }, {\n          row: 5,\n          column: 2\n        }, {\n          row: 5,\n          column: 4\n        }, {\n          row: 5,\n          column: 6\n        }, {\n          row: 6,\n          column: 1\n        }, {\n          row: 6,\n          column: 3\n        }, {\n          row: 6,\n          column: 5\n        }, {\n          row: 6,\n          column: 7\n        }, {\n          row: 7,\n          column: 0\n        }, {\n          row: 7,\n          column: 2\n        }, {\n          row: 7,\n          column: 4\n        }, {\n          row: 7,\n          column: 6\n        }]\n      },\n      validSpaces: [],\n      movingPiece: {\n        row: -1,\n        column: -1\n      },\n      blackTurn: true,\n      waitingForMove: false,\n      validPositionClicked: false,\n      blackHuman: true,\n      redHuman: false,\n      gameActive: false\n    };\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n  } //perform human move\n\n\n  //perfrom ai move\n  aiMove() {\n    if (this.state.gameActive) {\n      if (this.state.blackTurn && !this.state.blackHuman || !this.state.blackTurn && !this.state.redHuman) {\n        console.log(\"inside\");\n        var newBoard = minimax(copyBoard(this.state.board), true, 0, -10000, 10000, this.state.blackTurn);\n        this.setState(prevState => ({\n          board: _objectSpread({}, prevState.board, {\n            black: [],\n            red: []\n          })\n        }), () => {\n          for (var i = 0; i < newBoard.red.length; i++) {\n            this.addPiece(newBoard.red[i], false);\n          }\n\n          for (i = 0; i < newBoard.black.length; i++) {\n            this.addPiece(newBoard.black[i], true);\n          }\n\n          if (this.checkWin(this.state.blackTurn)) {\n            this.props.handleChange(this.state.blackTurn, true);\n            this.setState({\n              gameActive: false\n            });\n          } else {\n            this.setState({\n              blackTurn: !this.state.blackTurn\n            }, () => {\n              this.aiMove();\n              this.props.handleChange(this.state.blackTurn, false);\n            });\n          }\n        });\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    switch (nextProps.gameType) {\n      case 1:\n        this.setState(initialState);\n        this.setState({\n          blackHuman: true,\n          redHuman: true\n        });\n        break;\n\n      case 2:\n        this.setState(initialState);\n        this.setState({\n          blackHuman: true,\n          redHuman: false\n        });\n        break;\n    }\n  }\n  /*componentDidMount() {\n    this.aiMove();\n  }*/\n  //check if position is a valid move\n\n\n  isValidMove(position) {\n    for (var i = 0; i < this.state.validSpaces.length; i++) {\n      if (this.state.validSpaces[i].column === position.column && this.state.validSpaces[i].row === position.row) {\n        return true;\n      }\n    }\n\n    return false;\n  } //check if position is a jump\n\n\n  isJump(position) {\n    for (var i = 0; i < this.state.validSpaces.length; i++) {\n      if (this.state.validSpaces[i].column === position.column && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n        return true;\n      }\n    }\n\n    return false;\n  } //get position of a jumped piece\n\n\n  getJumpedPiece(position) {\n    for (var i = 0; i < this.state.validSpaces.length; i++) {\n      if (this.state.validSpaces[i].column === position.column && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n        return this.state.validSpaces[i].jumpedPiece;\n      }\n    }\n\n    return {\n      row: -1,\n      column: -1\n    };\n  } //check if position has black piece\n\n\n  blackContains(position) {\n    for (var i = 0; i < this.state.board.black.length; i++) {\n      if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n        return true;\n      }\n    }\n\n    return false;\n  } //check if position has red piece\n\n\n  redContains(position) {\n    for (var i = 0; i < this.state.board.red.length; i++) {\n      if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n        return true;\n      }\n    }\n\n    return false;\n  } //get all valid moves from a position\n\n\n  getValidMoves(position) {\n    var moves = [];\n\n    if (this.blackContains(position) || this.redContains(position)) {\n      for (var i = -1; i < 2; i++) {\n        for (var j = -1; j < 2; j++) {\n          if (i !== 0 && j !== 0) {\n            var pos = {\n              row: position.row + i,\n              column: position.column + j,\n              jump: false\n            };\n\n            if (!this.blackContains(pos) && !this.redContains(pos)) {\n              moves.push(pos);\n            }\n\n            var jumpPos = this.getValidJump(position, i, j);\n            moves.push(jumpPos);\n          }\n        }\n      }\n    }\n\n    return moves;\n  } //remove piece from board\n\n\n  removePiece(position, black) {\n    if (black === true) {\n      for (var i = 0; i < this.state.board.black.length; i++) {\n        if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n          this.state.board.black.splice(i, 1);\n        }\n      }\n    } else {\n      for (var i = 0; i < this.state.board.red.length; i++) {\n        if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n          this.state.board.red.splice(i, 1);\n        }\n      }\n    }\n  } //add piece to board at position\n\n\n  addPiece(position, black) {\n    if (black === true) {\n      this.state.board.black.push(position);\n    } else {\n      this.state.board.red.push(position);\n    }\n  } //determine if move is valid jump\n\n\n  getValidJump(curPos, i, j) {\n    var newPos = {\n      row: curPos.row + i,\n      column: curPos.column + j\n    };\n    var jumpPos = {\n      row: newPos.row + i,\n      column: newPos.column + j,\n      jump: true,\n      jumpedPiece: newPos\n    };\n\n    if (this.blackContains(curPos)) {\n      if (this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n\n    if (this.redContains(curPos)) {\n      if (this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n\n    return [];\n  } //determine if either side has won\n\n\n  checkWin(blackTurn) {\n    if (blackTurn === true) {\n      return this.state.board.red.length === 0;\n    } else {\n      return this.state.board.black.length === 0;\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.buttonClick === true) {\n      if (nextProps.gameType === 1) {\n        this.restart();\n        this.setState({\n          blackHuman: true,\n          redHuman: true\n        });\n      } else if (nextProps.gameType === 2) {\n        this.restart();\n        this.setState({\n          blackHuman: true,\n          redHuman: false\n        });\n      } else {\n        this.restart();\n        this.setState({\n          blackHuman: false,\n          redHuman: false\n        }, () => this.aiMove());\n      }\n    }\n  }\n\n  restart() {\n    this.setState(this.copyInitialState());\n  }\n\n  copyInitialState() {\n    var tempState = {\n      board: {\n        black: [{\n          row: 0,\n          column: 1\n        }, {\n          row: 0,\n          column: 3\n        }, {\n          row: 0,\n          column: 5\n        }, {\n          row: 0,\n          column: 7\n        }, {\n          row: 1,\n          column: 0\n        }, {\n          row: 1,\n          column: 2\n        }, {\n          row: 1,\n          column: 4\n        }, {\n          row: 1,\n          column: 6\n        }, {\n          row: 2,\n          column: 1\n        }, {\n          row: 2,\n          column: 3\n        }, {\n          row: 2,\n          column: 5\n        }, {\n          row: 2,\n          column: 7\n        }],\n        red: [{\n          row: 5,\n          column: 0\n        }, {\n          row: 5,\n          column: 2\n        }, {\n          row: 5,\n          column: 4\n        }, {\n          row: 5,\n          column: 6\n        }, {\n          row: 6,\n          column: 1\n        }, {\n          row: 6,\n          column: 3\n        }, {\n          row: 6,\n          column: 5\n        }, {\n          row: 6,\n          column: 7\n        }, {\n          row: 7,\n          column: 0\n        }, {\n          row: 7,\n          column: 2\n        }, {\n          row: 7,\n          column: 4\n        }, {\n          row: 7,\n          column: 6\n        }]\n      },\n      validSpaces: [],\n      movingPiece: {\n        row: -1,\n        column: -1\n      },\n      blackTurn: true,\n      waitingForMove: false,\n      validPositionClicked: false,\n      blackHuman: true,\n      redHuman: false,\n      gameActive: false\n    };\n    return tempState;\n  }\n\n  render() {\n    var rows = [];\n\n    for (var i = 0; i < 8; i++) {\n      rows.push(React.createElement(Row, {\n        row: i,\n        key: i,\n        board: this.state.board,\n        handleSquareClick: this.handleSquareClick,\n        validSpaces: this.state.validSpaces,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        width: 480,\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, rows);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/Board.js"],"names":["React","Component","Row","redContains","minimax","copyBoard","initialState","board","black","row","column","red","validSpaces","movingPiece","blackTurn","waitingForMove","validPositionClicked","blackHuman","redHuman","gameActive","Board","constructor","props","handleSquareClick","position","state","isValidMove","isJump","removingPiece","getJumpedPiece","removePiece","addPiece","checkWin","handleChange","setState","aiMove","blackContains","moves","getValidMoves","length","bind","console","log","newBoard","prevState","i","componentWillReceiveProps","nextProps","gameType","jump","jumpedPiece","j","pos","push","jumpPos","getValidJump","splice","curPos","newPos","buttonClick","restart","copyInitialState","tempState","render","rows","border","width","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Row from './Row';\nimport { redContains, minimax, copyBoard } from './MiniMax';\n\nconst initialState = {\n  board: {\n    black: [\n            {row: 0, column: 1}, {row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 7},\n            {row: 1, column: 0}, {row: 1, column: 2}, {row: 1, column: 4}, {row: 1, column: 6},\n            {row: 2, column: 1}, {row: 2, column: 3}, {row: 2, column: 5}, {row: 2, column: 7}\n    ],\n    red: [\n            {row: 5, column: 0}, {row: 5, column: 2}, {row: 5, column: 4}, {row: 5, column: 6},\n            {row: 6, column: 1}, {row: 6, column: 3}, {row: 6, column: 5}, {row: 6, column: 7},\n            {row: 7, column: 0}, {row: 7, column: 2}, {row: 7, column: 4}, {row: 7, column: 6}\n    ]\n  },\n  validSpaces: [],\n  movingPiece: {row: -1, column: -1},\n  blackTurn: true,\n  waitingForMove: false,\n  validPositionClicked: false,\n  blackHuman: true,\n  redHuman: false,\n  gameActive: false\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: {\n        black: [\n                {row: 0, column: 1}, {row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 7},\n                {row: 1, column: 0}, {row: 1, column: 2}, {row: 1, column: 4}, {row: 1, column: 6},\n                {row: 2, column: 1}, {row: 2, column: 3}, {row: 2, column: 5}, {row: 2, column: 7}\n        ],\n        red: [\n                {row: 5, column: 0}, {row: 5, column: 2}, {row: 5, column: 4}, {row: 5, column: 6},\n                {row: 6, column: 1}, {row: 6, column: 3}, {row: 6, column: 5}, {row: 6, column: 7},\n                {row: 7, column: 0}, {row: 7, column: 2}, {row: 7, column: 4}, {row: 7, column: 6}\n        ]\n      },\n      validSpaces: [],\n      movingPiece: {row: -1, column: -1},\n      blackTurn: true,\n      waitingForMove: false,\n      validPositionClicked: false,\n      blackHuman: true,\n      redHuman: false,\n      gameActive: false\n    };\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n  }\n\n  //perform human move\n  handleSquareClick = (position) => {\n    if(this.state.waitingForMove === true) {\n      if(this.isValidMove(position)) {\n\n        if (this.isJump(position) === true) {\n          var removingPiece = this.getJumpedPiece(position);\n          this.removePiece(removingPiece, !this.state.blackTurn);\n          this.removePiece(this.state.movingPiece, this.state.blackTurn);\n          this.addPiece(position, this.state.blackTurn);\n          if (this.checkWin(this.state.blackTurn)) {\n            this.props.handleChange(this.state.blackTurn, true);\n            return;\n          }\n        } else {\n          this.removePiece(this.state.movingPiece, this.state.blackTurn);\n          this.addPiece(position, this.state.blackTurn);\n        }\n\n        this.setState({ movingPiece: { row: -1, column: -1 } });\n        this.setState({ validSpaces: [] });\n        this.setState({ waitingForMove: false });\n        this.setState({ blackTurn: !this.state.blackTurn }, () => { this.props.handleChange(this.state.blackTurn, false); this.aiMove(); });\n\n      } else {\n        if((this.state.blackTurn && this.blackContains(position)) || (!this.state.blackTurn && this.redContains(position))) {\n          var moves = this.getValidMoves(position);\n          if(moves.length > 0) {\n            this.setState({ validSpaces: moves });\n            this.setState({ movingPiece: position});\n          }\n        }\n      }\n    } else {\n      this.setState({gameActive: true});\n      if((this.state.blackTurn && this.blackContains(position)) || (!this.state.blackTurn && this.redContains(position))) {\n        if((this.state.blackTurn && this.state.blackHuman) || (!this.state.blackTurn && this.state.redHuman)) {\n          var moves = this.getValidMoves(position);\n          if(moves.length > 0) {\n            this.setState({ validSpaces: moves });\n            this.setState({ movingPiece: position});\n            this.setState({ waitingForMove: true });\n          }\n        }\n      }\n    }\n  }\n\n  //perfrom ai move\n  aiMove() {\n    if(this.state.gameActive) {\n      if((this.state.blackTurn && !this.state.blackHuman) || (!this.state.blackTurn && !this.state.redHuman)) {\n        console.log(\"inside\");\n        var newBoard = minimax(copyBoard(this.state.board), true, 0, -10000, 10000, this.state.blackTurn );\n        this.setState(prevState => ({\n          board: {\n            ...prevState.board,\n            black: [],\n            red: []\n          }\n        }),() => {\n          for(var i = 0; i < newBoard.red.length; i++) {\n            this.addPiece(newBoard.red[i], false);\n          }\n          for(i = 0; i < newBoard.black.length; i++) {\n            this.addPiece(newBoard.black[i], true);\n          }\n          if(this.checkWin(this.state.blackTurn)) {\n            this.props.handleChange(this.state.blackTurn, true);\n            this.setState({gameActive: false});\n          } else {\n            this.setState({ blackTurn: !this.state.blackTurn }, () => {\n              this.aiMove();\n              this.props.handleChange(this.state.blackTurn, false);\n            });\n          }\n        });\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    switch(nextProps.gameType) {\n      case 1:\n        this.setState(initialState);\n        this.setState({blackHuman: true, redHuman: true});\n        break;\n      case 2:\n        this.setState(initialState);\n        this.setState({blackHuman: true, redHuman: false});\n        break;\n    }\n  }\n\n  /*componentDidMount() {\n    this.aiMove();\n  }*/\n\n  //check if position is a valid move\n  isValidMove(position) {\n    for(var i = 0; i < this.state.validSpaces.length; i++) {\n      if(this.state.validSpaces[i].column === position.column\n        && this.state.validSpaces[i].row === position.row) {\n          return true;\n        }\n    }\n    return false;\n  }\n\n  //check if position is a jump\n  isJump(position) {\n    for(var i = 0; i < this.state.validSpaces.length; i++) {\n      if(this.state.validSpaces[i].column === position.column\n        && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n          return true;\n        }\n    }\n    return false;\n  }\n\n  //get position of a jumped piece\n  getJumpedPiece(position) {\n    for(var i = 0; i < this.state.validSpaces.length; i++) {\n      if(this.state.validSpaces[i].column === position.column\n        && this.state.validSpaces[i].row === position.row && this.state.validSpaces[i].jump === true) {\n          return this.state.validSpaces[i].jumpedPiece;\n        }\n    }\n    return {row: -1, column: -1};\n  }\n\n  //check if position has black piece\n  blackContains(position) {\n    for (var i = 0; i < this.state.board.black.length; i++) {\n      if (this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //check if position has red piece\n  redContains(position) {\n    for (var i = 0; i < this.state.board.red.length; i++) {\n      if (this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //get all valid moves from a position\n  getValidMoves(position) {\n    var moves = [];\n    if(this.blackContains(position) || this.redContains(position)) {\n      for(var i = -1; i < 2; i++) {\n        for(var j = -1; j < 2; j++) {\n          if(i !== 0 && j !== 0) {\n            var pos = {row: position.row + i, column: position.column + j, jump: false};\n            if(!this.blackContains(pos) && !this.redContains(pos)) {\n              moves.push(pos);\n            }\n            var jumpPos = this.getValidJump(position, i, j);\n            moves.push(jumpPos);\n          }\n        }\n      }\n    }\n    return moves;\n  }\n\n  //remove piece from board\n  removePiece(position, black) {\n\n    if(black === true) {\n      for(var i = 0; i < this.state.board.black.length; i++) {\n        if(this.state.board.black[i].row === position.row && this.state.board.black[i].column === position.column) {\n          this.state.board.black.splice(i, 1);\n        }\n      }\n    } else {\n      for(var i = 0; i < this.state.board.red.length; i++) {\n        if(this.state.board.red[i].row === position.row && this.state.board.red[i].column === position.column) {\n          this.state.board.red.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  //add piece to board at position\n  addPiece(position, black) {\n\n    if(black === true) {\n      this.state.board.black.push(position);\n    } else {\n      this.state.board.red.push(position);\n    }\n  }\n\n  //determine if move is valid jump\n  getValidJump(curPos, i, j) {\n    var newPos = {row: curPos.row + i, column: curPos.column + j};\n    var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n    if(this.blackContains(curPos)) {\n      if(this.redContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n    if(this.redContains(curPos)) {\n      if(this.blackContains(newPos) && !this.blackContains(jumpPos) && !this.redContains(jumpPos)) {\n        return jumpPos;\n      }\n    }\n    return [];\n  }\n\n  //determine if either side has won\n  checkWin(blackTurn) {\n    if (blackTurn === true) {\n      return this.state.board.red.length === 0;\n    } else {\n      return this.state.board.black.length === 0;\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.buttonClick === true) {\n      if (nextProps.gameType === 1) {\n        this.restart();\n        this.setState({blackHuman: true, redHuman: true});\n      } else if (nextProps.gameType === 2) {\n        this.restart();\n        this.setState({blackHuman: true, redHuman: false});\n      } else {\n        this.restart();\n        this.setState({blackHuman: false, redHuman: false}, () => this.aiMove());\n      }\n    }\n  }\n\n  restart() {\n    this.setState(this.copyInitialState());\n  }\n\n  copyInitialState() {\n    var tempState = {\n      board: {\n        black: [\n                {row: 0, column: 1}, {row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 7},\n                {row: 1, column: 0}, {row: 1, column: 2}, {row: 1, column: 4}, {row: 1, column: 6},\n                {row: 2, column: 1}, {row: 2, column: 3}, {row: 2, column: 5}, {row: 2, column: 7}\n        ],\n        red: [\n                {row: 5, column: 0}, {row: 5, column: 2}, {row: 5, column: 4}, {row: 5, column: 6},\n                {row: 6, column: 1}, {row: 6, column: 3}, {row: 6, column: 5}, {row: 6, column: 7},\n                {row: 7, column: 0}, {row: 7, column: 2}, {row: 7, column: 4}, {row: 7, column: 6}\n        ]\n      },\n      validSpaces: [],\n      movingPiece: {row: -1, column: -1},\n      blackTurn: true,\n      waitingForMove: false,\n      validPositionClicked: false,\n      blackHuman: true,\n      redHuman: false,\n      gameActive: false\n    }\n    return tempState;\n  }\n\n  render() {\n    var rows = [];\n    for(var i = 0; i < 8; i++) {\n      rows.push(<Row row={i} key={i}\n        board={this.state.board}\n        handleSquareClick={this.handleSquareClick}\n        validSpaces={this.state.validSpaces} />);\n    }\n    return <div style={{border: \"1px solid black\", width: 480, margin:\"auto\"}}>{rows}</div>;\n  }\n\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}