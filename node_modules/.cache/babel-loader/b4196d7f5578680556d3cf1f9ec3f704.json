{"ast":null,"code":"export function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n\n    return val;\n  }\n}\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n\n  if (blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {} else {}\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n\n  if (isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for (var i = 0; i < board.black.length; i++) {\n      var posMoves = {\n        move: board.black[i]\n      };\n      posMoves.nextMoves = getValidMoves(board, board.black[i]);\n      console.log(posMoves);\n      moves.concat(posMoves);\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      var posMoves = {\n        move: board.red[i]\n      };\n      posMoves.nextMoves = getValidMoves(board, board.red[i]);\n      console.log(posMoves);\n      moves.concat(posMoves);\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidMoves(board, position) {\n  var moves = [];\n\n  if (blackContains(board, position) || redContains(board, position)) {\n    for (var i = -1; i < 2; i++) {\n      for (var j = -1; j < 2; j++) {\n        if (i !== 0 && j !== 0) {\n          if (position.row + i > -1 && position.row + i < 8 && position.column + j > -1 && position.column + j < 8) {\n            var pos = {\n              row: position.row + i,\n              column: position.column + j,\n              jump: false\n            };\n\n            if (!blackContains(board, pos) && !redContains(board, pos)) {\n              moves.push(pos);\n            }\n\n            var jumpPos = getValidJump(position, i, j, board);\n\n            if (jumpPos.length > 0) {\n              moves.push(jumpPos[0]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j, board) {\n  var newPos = {\n    row: curPos.row + i,\n    column: curPos.column + j\n  };\n  var jumpPos = {\n    row: newPos.row + i,\n    column: newPos.column + j,\n    jump: true,\n    jumpedPiece: newPos\n  };\n\n  if (jumpPos.row > -1 && jumpPos.row < 8 && jumpPos.column > -1 && jumpPos.column < 8) {\n    if (blackContains(board, curPos)) {\n      if (redContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n\n    if (redContains(board, curPos)) {\n      if (blackContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n  }\n\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n  if (black === true) {\n    for (var i = 0; i < board.black.length; i++) {\n      if (board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for (var i = 0; i < board.red.length; i++) {\n      if (board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n  if (black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n}\n\nfunction blackContains(board, position) {\n  for (var i = 0; i < board.black.length; i++) {\n    if (board.black[i].row === position.row && board.black[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction redContains(board, position) {\n  for (var i = 0; i < board.red.length; i++) {\n    if (board.red[i].row === position.row && board.red[i].column === position.column) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/noahceluch/Documents/checkers/src/MiniMax.js"],"names":["minimax","board","isMax","depth","alpha","beta","blackHeuristic","m","calculateHeuristic","val","nextBoards","getNextBoards","i","length","Math","max","min","h","black","red","moves","getAllValidMoves","posMoves","move","nextMoves","getValidMoves","console","log","concat","position","blackContains","redContains","j","row","column","pos","jump","push","jumpPos","getValidJump","curPos","newPos","jumpedPiece","removePiece","splice","addPiece"],"mappings":"AAEA,OAAO,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,IAA7C,EAAmDC,cAAnD,EAAmE;AACxE,MAAIH,KAAK,KAAK,CAAd,EAAiB;AACfF,IAAAA,KAAK,CAACM,CAAN,GAAU,KAAKC,kBAAL,CAAwBP,KAAxB,EAA+BK,cAA/B,CAAV;AACA,WAAOL,KAAP;AACD;;AACD,MAAIC,KAAJ,EAAW;AACT,QAAIO,GAAG,GAAG,CAAC,KAAX;AACA,QAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmBV,KAAnB,EAA0BC,KAA1B,EAAiCI,cAAjC,CAAjB;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACG,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CH,MAAAA,GAAG,GAAGK,IAAI,CAACC,GAAL,CAASN,GAAT,EAAcT,OAAO,CAACU,UAAU,CAACE,CAAD,CAAX,EAAgB,CAACV,KAAjB,EAAwBC,KAAK,GAAG,CAAhC,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,cAAhD,CAArB,CAAN;AACAF,MAAAA,KAAK,GAAGU,IAAI,CAACC,GAAL,CAASX,KAAT,EAAgBK,GAAhB,CAAR;;AACA,UAAIL,KAAK,IAAIC,IAAb,EAAmB;AACjB,eAAOI,GAAP;AACD;AACF;;AACD,WAAOA,GAAP;AACD,GAXD,MAWO;AACL,QAAIA,GAAG,GAAG,KAAV;AACA,QAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmBV,KAAnB,EAA0BC,KAA1B,EAAiCI,cAAjC,CAAjB;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACG,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CH,MAAAA,GAAG,GAAGK,IAAI,CAACE,GAAL,CAASP,GAAT,EAAcT,OAAO,CAACU,UAAU,CAACE,CAAD,CAAX,EAAgB,CAACV,KAAjB,EAAwBC,KAAK,GAAG,CAAhC,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,cAAhD,CAArB,CAAN;AACAD,MAAAA,IAAI,GAAGS,IAAI,CAACE,GAAL,CAASX,IAAT,EAAeI,GAAf,CAAP;;AACA,UAAIL,KAAK,IAAIC,IAAb,EAAmB;AACjB,eAAOI,GAAP;AACD;AACF;;AACD,WAAOA,GAAP;AACD;AACF;AAED,OAAO,SAASD,kBAAT,CAA4BP,KAA5B,EAAmCK,cAAnC,EAAmD;AACxD,MAAIW,CAAC,GAAG,CAAR;;AACA,MAAGX,cAAH,EAAmB;AACjBW,IAAAA,CAAC,GAAGhB,KAAK,CAACiB,KAAN,CAAYL,MAAZ,GAAqBZ,KAAK,CAACkB,GAAN,CAAUN,MAAnC;AACD,GAFD,MAEO;AACLI,IAAAA,CAAC,GAAGhB,KAAK,CAACkB,GAAN,CAAUN,MAAV,GAAmBZ,KAAK,CAACiB,KAAN,CAAYL,MAAnC;AACD;;AACD,SAAOI,CAAP;AACD;;AAED,SAASN,aAAT,CAAuBV,KAAvB,EAA8BC,KAA9B,EAAqCI,cAArC,EAAqD;AACnD,MAAIc,KAAK,GAAG,EAAZ;;AACA,MAAGlB,KAAK,IAAII,cAAT,IAA2B,CAACJ,KAAD,IAAU,CAACI,cAAzC,EAAyD,CAExD,CAFD,MAGK,CAEJ;AACF;;AAED,OAAO,SAASe,gBAAT,CAA0BpB,KAA1B,EAAiCC,KAAjC,EAAwCI,cAAxC,EAAwD;AAC7D,MAAIc,KAAK,GAAG,EAAZ;;AACA,MAAGlB,KAAK,IAAII,cAAT,IAA2B,CAACJ,KAAD,IAAU,CAACI,cAAzC,EAAyD;AACvD,SAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,KAAK,CAACiB,KAAN,CAAYL,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAIU,QAAQ,GAAG;AAACC,QAAAA,IAAI,EAAEtB,KAAK,CAACiB,KAAN,CAAYN,CAAZ;AAAP,OAAf;AACAU,MAAAA,QAAQ,CAACE,SAAT,GAAqBC,aAAa,CAACxB,KAAD,EAAQA,KAAK,CAACiB,KAAN,CAAYN,CAAZ,CAAR,CAAlC;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAF,MAAAA,KAAK,CAACQ,MAAN,CAAaN,QAAb;AACD;AACF,GAPD,MAQK;AACH,SAAI,IAAIV,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,KAAK,CAACkB,GAAN,CAAUN,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAIU,QAAQ,GAAG;AAACC,QAAAA,IAAI,EAAEtB,KAAK,CAACkB,GAAN,CAAUP,CAAV;AAAP,OAAf;AACAU,MAAAA,QAAQ,CAACE,SAAT,GAAqBC,aAAa,CAACxB,KAAD,EAAQA,KAAK,CAACkB,GAAN,CAAUP,CAAV,CAAR,CAAlC;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAF,MAAAA,KAAK,CAACQ,MAAN,CAAaN,QAAb;AACD;AACF;;AACD,SAAOF,KAAP;AACD;;AAED,SAASK,aAAT,CAAuBxB,KAAvB,EAA8B4B,QAA9B,EAAwC;AACtC,MAAIT,KAAK,GAAG,EAAZ;;AACA,MAAGU,aAAa,CAAC7B,KAAD,EAAQ4B,QAAR,CAAb,IAAkCE,WAAW,CAAC9B,KAAD,EAAQ4B,QAAR,CAAhD,EAAmE;AACjE,SAAI,IAAIjB,CAAC,GAAG,CAAC,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,WAAI,IAAIoB,CAAC,GAAG,CAAC,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAGpB,CAAC,KAAK,CAAN,IAAWoB,CAAC,KAAK,CAApB,EAAuB;AACrB,cAAGH,QAAQ,CAACI,GAAT,GAAerB,CAAf,GAAmB,CAAC,CAApB,IAAyBiB,QAAQ,CAACI,GAAT,GAAerB,CAAf,GAAmB,CAA5C,IAAiDiB,QAAQ,CAACK,MAAT,GAAkBF,CAAlB,GAAsB,CAAC,CAAxE,IAA6EH,QAAQ,CAACK,MAAT,GAAkBF,CAAlB,GAAsB,CAAtG,EAAyG;AACvG,gBAAIG,GAAG,GAAG;AAACF,cAAAA,GAAG,EAAEJ,QAAQ,CAACI,GAAT,GAAerB,CAArB;AAAwBsB,cAAAA,MAAM,EAAEL,QAAQ,CAACK,MAAT,GAAkBF,CAAlD;AAAqDI,cAAAA,IAAI,EAAE;AAA3D,aAAV;;AACA,gBAAG,CAACN,aAAa,CAAC7B,KAAD,EAAQkC,GAAR,CAAd,IAA8B,CAACJ,WAAW,CAAC9B,KAAD,EAAQkC,GAAR,CAA7C,EAA2D;AACzDf,cAAAA,KAAK,CAACiB,IAAN,CAAWF,GAAX;AACD;;AACD,gBAAIG,OAAO,GAAGC,YAAY,CAACV,QAAD,EAAWjB,CAAX,EAAcoB,CAAd,EAAiB/B,KAAjB,CAA1B;;AACA,gBAAIqC,OAAO,CAACzB,MAAR,GAAiB,CAArB,EAAwB;AACtBO,cAAAA,KAAK,CAACiB,IAAN,CAAWC,OAAO,CAAC,CAAD,CAAlB;AACD;AACF;AACF;AACF;AACF;AACF;;AACD,SAAOlB,KAAP;AACD;;AAED,SAASmB,YAAT,CAAsBC,MAAtB,EAA8B5B,CAA9B,EAAiCoB,CAAjC,EAAoC/B,KAApC,EAA2C;AACzC,MAAIwC,MAAM,GAAG;AAACR,IAAAA,GAAG,EAAEO,MAAM,CAACP,GAAP,GAAarB,CAAnB;AAAsBsB,IAAAA,MAAM,EAAEM,MAAM,CAACN,MAAP,GAAgBF;AAA9C,GAAb;AACA,MAAIM,OAAO,GAAG;AAACL,IAAAA,GAAG,EAAEQ,MAAM,CAACR,GAAP,GAAarB,CAAnB;AAAsBsB,IAAAA,MAAM,EAAEO,MAAM,CAACP,MAAP,GAAgBF,CAA9C;AAAiDI,IAAAA,IAAI,EAAE,IAAvD;AAA6DM,IAAAA,WAAW,EAAED;AAA1E,GAAd;;AACA,MAAGH,OAAO,CAACL,GAAR,GAAc,CAAC,CAAf,IAAoBK,OAAO,CAACL,GAAR,GAAc,CAAlC,IAAuCK,OAAO,CAACJ,MAAR,GAAiB,CAAC,CAAzD,IAA8DI,OAAO,CAACJ,MAAR,GAAiB,CAAlF,EAAqF;AACnF,QAAGJ,aAAa,CAAC7B,KAAD,EAAQuC,MAAR,CAAhB,EAAiC;AAC/B,UAAGT,WAAW,CAAC9B,KAAD,EAAQwC,MAAR,CAAX,IAA8B,CAACX,aAAa,CAAC7B,KAAD,EAAQqC,OAAR,CAA5C,IAAgE,CAACP,WAAW,CAAC9B,KAAD,EAAQqC,OAAR,CAA/E,EAAiG;AAC/F,eAAO,CAACA,OAAD,CAAP;AACD;AACF;;AACD,QAAGP,WAAW,CAAC9B,KAAD,EAAQuC,MAAR,CAAd,EAA+B;AAC7B,UAAGV,aAAa,CAAC7B,KAAD,EAAQwC,MAAR,CAAb,IAAgC,CAACX,aAAa,CAAC7B,KAAD,EAAQqC,OAAR,CAA9C,IAAkE,CAACP,WAAW,CAAC9B,KAAD,EAAQqC,OAAR,CAAjF,EAAmG;AACjG,eAAO,CAACA,OAAD,CAAP;AACD;AACF;AACF;;AACD,SAAO,EAAP;AACD;;AAED,SAASK,WAAT,CAAqB1C,KAArB,EAA4B4B,QAA5B,EAAsCX,KAAtC,EAA6C;AAE3C,MAAGA,KAAK,KAAK,IAAb,EAAmB;AACjB,SAAI,IAAIN,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,KAAK,CAACiB,KAAN,CAAYL,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAGX,KAAK,CAACiB,KAAN,CAAYN,CAAZ,EAAeqB,GAAf,KAAuBJ,QAAQ,CAACI,GAAhC,IAAuChC,KAAK,CAACiB,KAAN,CAAYN,CAAZ,EAAesB,MAAf,KAA0BL,QAAQ,CAACK,MAA7E,EAAqF;AACnFjC,QAAAA,KAAK,CAACiB,KAAN,CAAY0B,MAAZ,CAAmBhC,CAAnB,EAAsB,CAAtB;AACD;AACF;AACF,GAND,MAMO;AACL,SAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,KAAK,CAACkB,GAAN,CAAUN,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAGX,KAAK,CAACkB,GAAN,CAAUP,CAAV,EAAaqB,GAAb,KAAqBJ,QAAQ,CAACI,GAA9B,IAAqChC,KAAK,CAACkB,GAAN,CAAUP,CAAV,EAAasB,MAAb,KAAwBL,QAAQ,CAACK,MAAzE,EAAiF;AAC/EjC,QAAAA,KAAK,CAACkB,GAAN,CAAUyB,MAAV,CAAiBhC,CAAjB,EAAoB,CAApB;AACD;AACF;AACF;;AACD,SAAOX,KAAP;AACD;;AAED,SAAS4C,QAAT,CAAkB5C,KAAlB,EAAyB4B,QAAzB,EAAmCX,KAAnC,EAA0C;AAExC,MAAGA,KAAK,KAAK,IAAb,EAAmB;AACjBjB,IAAAA,KAAK,CAACiB,KAAN,CAAYmB,IAAZ,CAAiBR,QAAjB;AACD,GAFD,MAEO;AACL5B,IAAAA,KAAK,CAACkB,GAAN,CAAUkB,IAAV,CAAeR,QAAf;AACD;AACF;;AAED,SAASC,aAAT,CAAuB7B,KAAvB,EAA8B4B,QAA9B,EAAwC;AACtC,OAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACiB,KAAN,CAAYL,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIX,KAAK,CAACiB,KAAN,CAAYN,CAAZ,EAAeqB,GAAf,KAAuBJ,QAAQ,CAACI,GAAhC,IAAuChC,KAAK,CAACiB,KAAN,CAAYN,CAAZ,EAAesB,MAAf,KAA0BL,QAAQ,CAACK,MAA9E,EAAsF;AACpF,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;;AAED,SAASH,WAAT,CAAqB9B,KAArB,EAA4B4B,QAA5B,EAAsC;AACpC,OAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACkB,GAAN,CAAUN,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIX,KAAK,CAACkB,GAAN,CAAUP,CAAV,EAAaqB,GAAb,KAAqBJ,QAAQ,CAACI,GAA9B,IAAqChC,KAAK,CAACkB,GAAN,CAAUP,CAAV,EAAasB,MAAb,KAAwBL,QAAQ,CAACK,MAA1E,EAAkF;AAChF,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD","sourcesContent":["\n\nexport function minimax(board, isMax, depth, alpha, beta, blackHeuristic) {\n  if (depth === 5) {\n    board.m = this.calculateHeuristic(board, blackHeuristic);\n    return board;\n  }\n  if (isMax) {\n    var val = -10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.max(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      alpha = Math.max(alpha, val);\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  } else {\n    var val = 10000;\n    var nextBoards = this.getNextBoards(board, isMax, blackHeuristic);\n    for (var i = 0; i < nextBoards.length; i++) {\n      val = Math.min(val, minimax(nextBoards[i], !isMax, depth + 1, alpha, beta, blackHeuristic));\n      beta = Math.min(beta, val);\n      if (alpha >= beta) {\n        return val;\n      }\n    }\n    return val;\n  }\n}\n\nexport function calculateHeuristic(board, blackHeuristic) {\n  var h = 0;\n  if(blackHeuristic) {\n    h = board.black.length - board.red.length;\n  } else {\n    h = board.red.length - board.black.length;\n  }\n  return h;\n}\n\nfunction getNextBoards(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n\n  }\n  else {\n\n  }\n}\n\nexport function getAllValidMoves(board, isMax, blackHeuristic) {\n  var moves = [];\n  if(isMax && blackHeuristic || !isMax && !blackHeuristic) {\n    for(var i = 0; i < board.black.length; i++) {\n      var posMoves = {move: board.black[i]};\n      posMoves.nextMoves = getValidMoves(board, board.black[i]);\n      console.log(posMoves);\n      moves.concat(posMoves);\n    }\n  }\n  else {\n    for(var i = 0; i < board.red.length; i++) {\n      var posMoves = {move: board.red[i]};\n      posMoves.nextMoves = getValidMoves(board, board.red[i]);\n      console.log(posMoves);\n      moves.concat(posMoves);\n    }\n  }\n  return moves;\n}\n\nfunction getValidMoves(board, position) {\n  var moves = [];\n  if(blackContains(board, position) || redContains(board, position)) {\n    for(var i = -1; i < 2; i++) {\n      for(var j = -1; j < 2; j++) {\n        if(i !== 0 && j !== 0) {\n          if(position.row + i > -1 && position.row + i < 8 && position.column + j > -1 && position.column + j < 8) {\n            var pos = {row: position.row + i, column: position.column + j, jump: false};\n            if(!blackContains(board, pos) && !redContains(board, pos)) {\n              moves.push(pos);\n            }\n            var jumpPos = getValidJump(position, i, j, board);\n            if (jumpPos.length > 0) {\n              moves.push(jumpPos[0]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return moves;\n}\n\nfunction getValidJump(curPos, i, j, board) {\n  var newPos = {row: curPos.row + i, column: curPos.column + j};\n  var jumpPos = {row: newPos.row + i, column: newPos.column + j, jump: true, jumpedPiece: newPos};\n  if(jumpPos.row > -1 && jumpPos.row < 8 && jumpPos.column > -1 && jumpPos.column < 8) {\n    if(blackContains(board, curPos)) {\n      if(redContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n    if(redContains(board, curPos)) {\n      if(blackContains(board, newPos) && !blackContains(board, jumpPos) && !redContains(board, jumpPos)) {\n        return [jumpPos];\n      }\n    }\n  }\n  return [];\n}\n\nfunction removePiece(board, position, black) {\n\n  if(black === true) {\n    for(var i = 0; i < board.black.length; i++) {\n      if(board.black[i].row === position.row && board.black[i].column === position.column) {\n        board.black.splice(i, 1);\n      }\n    }\n  } else {\n    for(var i = 0; i < board.red.length; i++) {\n      if(board.red[i].row === position.row && board.red[i].column === position.column) {\n        board.red.splice(i, 1);\n      }\n    }\n  }\n  return board;\n}\n\nfunction addPiece(board, position, black) {\n\n  if(black === true) {\n    board.black.push(position);\n  } else {\n    board.red.push(position);\n  }\n}\n\nfunction blackContains(board, position) {\n  for (var i = 0; i < board.black.length; i++) {\n    if (board.black[i].row === position.row && board.black[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction redContains(board, position) {\n  for (var i = 0; i < board.red.length; i++) {\n    if (board.red[i].row === position.row && board.red[i].column === position.column) {\n      return true;\n    }\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}